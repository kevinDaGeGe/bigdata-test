<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
    <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>jdbc:mysql://mysql01:3306/db_hive?createDatabaseIfNotExist=true</value>
        <description>
            JDBC connect string for a JDBC metastore.
            To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.
            For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.
        </description>
    </property>
    <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>com.mysql.cj.jdbc.Driver</value>
    </property>
    <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>hive</value>
        <description>JDBC for metastore connect username</description>
    </property>
    <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>Hive@2021</value>
        <description>JDBC for metastore connect password</description>
    </property>
    <!--元数据校验-->
    <property>
        <name>hive.metastore.schema.verification</name>
        <value>false</value>
    </property>
    <!--thrift链接端口-->
    <property>
        <name>hive.server2.thrift.port</name>
        <value>10000</value>
    </property>
    <!--临时目录-->
    <property>
        <name>hive.exec.scratchdir</name>
        <value>/user/hive/tmp</value>
    </property>
    <!--临时目录-->
    <property>
        <name>hive.querylog.location</name>
        <value>/user/hive/log/hadoop</value>
        <description>Location of Hive run time structured log file</description>
    </property>
    <!--开启日志打印 -->
    <property>
        <name>datanucleus.cache.level2</name>
        <value>error</value>
    </property>
    <property>
        <name>hive.execution.engine</name>
        <value>mr</value>
        <description>hive engine</description>
    </property>
    <!--权限控制开始-->
    <property>
        <name>hive.server2.authentication</name>
        <value>CUSTOM</value>
        <description>Expects one of [nosasl, none, ldap, kerberos, pam, custom].
            Client authentication types.
            NONE: no authentication check
            LDAP: LDAP/AD based authentication
            KERBEROS: Kerberos/GSSAPI authentication
            CUSTOM: Custom authentication provider
            (Use with property hive.server2.custom.authentication.class)
            PAM: Pluggable authentication module
            NOSASL: Raw transport
        </description>
    </property>
    <property>
        <name>hive.server2.custom.authentication.class</name>
        <value>com.zqpay.bigdata.hive.jar.CustomPasswdAuthenticator</value>
        <description>class name</description>
    </property>
    <property>
        <name>hive.server2.active.passive.ha.enable</name>
        <value>true</value>
        <description>ha enable</description>
    </property>
    <property>
        <name>hive.files.umask.value</name>
        <value>0002</value>
        <description>The dfs.umask value for the hive created folders</description>
    </property>
    <property>
        <name>hive.metastore.authorization.storage.checks</name>
        <value>true</value>
        <description>Should the metastore do authorization checks against
            the underlying storage for operations like drop-partition (disallow
            the drop-partition if the user in question doesn't have permissions
            to delete the corresponding directory on the storage).
        </description>
    </property>
    <property>
        <name>hive.metastore.execute.setugi</name>
        <value>false</value>
        <description>非安全模式，设置为true会令metastore以客户端的用户和组权限执行DFS操作，默认是false，这个属性需要服务端和客户端同时设置；</description>
    </property>
    <property>
        <name>hive.security.authorization.enabled</name>
        <value>true</value>
        <description>Enable or disable the hive client authorization</description>
    </property>
    <property>
        <name>hive.security.authorization.createtable.owner.grants</name>
        <value>ALL</value>
        <description>The privileges automatically granted to the owner whenever
            a table gets created.An example like "select,drop" will grant select
            and drop privilege to the owner of the table
        </description>
    </property>
    <property>
        <name>hive.jdbc_passwd.auth.hadoop</name>
        <value>Hadoop@2021</value>
        <description/>
    </property>
    <property>
        <name>hive.jdbc_passwd.auth.zf_core_report</name>
        <value>ZfCoreReport@2022</value>
        <description/>
    </property>
    <!--权限控制结束-->

</configuration>
